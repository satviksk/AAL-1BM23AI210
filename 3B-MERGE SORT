#include <stdio.h>


void merge(int arr[], int left, int mid, int right) 
{
    int n1 = mid - left + 1;  
    int n2 = right - mid;     
    int leftArr[n1], rightArr[n2];
    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        rightArr[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    
    while (i < n1 && j < n2) 
	{
        if (leftArr[i] <= rightArr[j]) 
		{
            arr[k] = leftArr[i];
            i++;
        } 
		else 
		{
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) 
	{
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) 
	{
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) 
{
    if (left < right) 
	{
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}
void printArray(int arr[], int size) 
{
    for (int i = 0; i < size; i++) 
	{
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() 
{
    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: \n");
    printArray(arr, size);

    mergeSort(arr, 0, size - 1);

    printf("\nSorted array: \n");
    printArray(arr, size);

    return 0;
}

OUTPUT:
Original array: 
38 27 43 3 9 82 10 

Sorted array: 
3 9 10 27 38 43 82 
