#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 10  
typedef struct Graph {
    int vertices;
    int adj[MAX_NODES][MAX_NODES];
} Graph;

void initGraph(Graph* g, int vertices) {
    g->vertices = vertices;
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            g->adj[i][j] = 0;
        }
    }
}

void addEdge(Graph* g, int start, int end) {
    g->adj[start][end] = 1;  
}

void dfs(int node, int visited[], int stack[], int* stackIndex, Graph* g) {
    visited[node] = 1;  
    for (int i = 0; i < g->vertices; i++) {
        if (g->adj[node][i] == 1 && !visited[i]) {
            dfs(i, visited, stack, stackIndex, g);
        }
    }

    stack[*stackIndex] = node;
    (*stackIndex)++;
}

void topologicalSort(Graph* g) {
    int visited[g->vertices];
    for (int i = 0; i < g->vertices; i++) {
        visited[i] = 0; 
    }

    int stack[g->vertices];
    int stackIndex = 0;

    for (int i = 0; i < g->vertices; i++) {
        if (!visited[i]) {
            dfs(i, visited, stack, &stackIndex, g);
        }
    }

    printf("Topological Sort Order: ");
    for (int i = stackIndex - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
    printf("\n");
}

int main() {
    Graph g;
    initGraph(&g, 6); 
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 2);
    addEdge(&g, 1, 3);
    addEdge(&g, 2, 4);
    addEdge(&g, 2, 5);

    topologicalSort(&g);

    return 0;
}


output:

Topological Sort Order: 1 3 0 2 5 4 
